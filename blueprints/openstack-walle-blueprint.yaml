tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml

inputs:

    cloudify_agent:
        default:  'ubuntu'

    server_image:
        default: e8e1ddb9-80e8-4257-96c4-22d4f2a4927f # Ubuntu Server 14.04

    server_flavor_name:
        default: m1.medium

    server_security_group:
        default: all_ports_open_walle

    walle_package_url:
        type: string
        description: >
            Walle TAR.GZ package

    walle_nginx_configuration_url:
        type: string
        description: >
            Walle-related nginx configuration

    postgresql_db_name:
        type: string
        default: 'walle'

    postgresql_db_user:
        type: string
        default: 'walle'

    postgresql_db_pass:
        type: string

    existing_walle_db_url:
        type: string
        default: ''
        description: >
            postgresql URL that points to existing database
            example - postgresql://DB_USER:DB_PASS@DB_IP/DB_NAME

    is_production:
        type: boolean
        default: false
        description: >
            Indicates the purpose of the installation, production or staging

    use_existing_walle_db_node:
        type: boolean
        default: false
        description: >
            flag that tells to use existing postgresql node

    use_existing_nginx_node:
        type: boolean
        default: False
        description: >
            flag that tells to use existing nginx node

node_types:
    # template for postgresql node
    PostgreSqlDatabase:
        derived_from: cloudify.nodes.DBMS
        properties:
          port:
            description: PostgreSQL port
            type: integer

node_templates:

    nginx_ip:
        type: cloudify.openstack.nodes.FloatingIP

    walle_ip:
        type: cloudify.openstack.nodes.FloatingIP

    postgresql_ip:
        type: cloudify.openstack.nodes.FloatingIP

    all_ports_open_walle:
        type: cloudify.openstack.nodes.SecurityGroup
        properties:
            security_group:
                name: { get_input: server_security_group }
            rules:
                - remote_ip_prefix: 0.0.0.0/0
                  port_range_min: 1
                  port_range_max: 65535
                  protocol: tcp
                - remote_ip_prefix: 0.0.0.0/0
                  port_range_min: 1
                  port_range_max: 65535
                  protocol: udp

    walle_host:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups:
                    - { get_input: server_security_group }
        relationships:
            -   type: cloudify.openstack.server_connected_to_floating_ip
                target: walle_ip
            -   type: cloudify.relationships.depends_on
                target: all_ports_open_walle

    nginx_host:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups:
                    - { get_input: server_security_group }
        relationships:
            -   type: cloudify.openstack.server_connected_to_floating_ip
                target: nginx_ip
            -   type: cloudify.relationships.depends_on
                target: all_ports_open_walle

    postgresql_host:
        type: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                user: { get_input: cloudify_agent }
            server:
                image: { get_input: server_image }
                flavor_name: { get_input: server_flavor_name }
                security_groups:
                    - { get_input: server_security_group }
        relationships:
            -   type: cloudify.openstack.server_connected_to_floating_ip
                target: postgresql_ip
            -   type: cloudify.relationships.depends_on
                target: all_ports_open_walle

    nginx:
        type: cloudify.nodes.SoftwareComponent
        relationships:
          - target: nginx_host
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                start:
                    implementation: scripts/walle/configure_nginx.sh
                    inputs:
                        SKIP_INSTALLATION: { get_input: use_existing_nginx_node }
                        WALLE_NGINX_CONFIGURATION_URL: { get_input: walle_nginx_configuration_url }
                        WALLE_INTERNAL_IP_ADDRESS: { get_attribute: [ walle_host, ip] }

    gunicorn:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
           cloudify.interfaces.lifecycle:
              create:
                 implementation: scripts/walle/install_dependencies.sh
        relationships:
          - target: walle_host
            type: cloudify.relationships.contained_in

    postgresqld:
        type: PostgreSqlDatabase
        properties:
            port: 5432
        relationships:
          - target: postgresql_host
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    implementation: scripts/install_postgresql.sh
                    inputs:
                        SKIP_INSTALLATION: { get_input: use_existing_walle_db_node }

    postgresql_walle:
        type: cloudify.nodes.SoftwareComponent
        relationships:
          - target: postgresqld
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                start:
                    implementation: scripts/install_walle_postgresql.sh
                    inputs:
                        SKIP_CONFIGURATION: { get_input: use_existing_walle_db_node }
                        DB_IP: { get_attribute: [postgresql_host, ip] }
                        WALLE_IP: { get_attribute: [walle_host, ip] }
                        DB_USER: { get_input: postgresql_db_user }
                        DB_NAME: { get_input: postgresql_db_name }
                        DB_PASS: { get_input: postgresql_db_pass }

    walle:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    implementation: scripts/walle/install_walle.sh
                    inputs:
                        WALLE_PACKAGE_URL: { get_input: walle_package_url }
                start:
                    implementation: scripts/walle/configure.sh
                    inputs:
                        WALLE_EXISTING_DB: { get_input: existing_walle_db_url }
                        DB_IP: { get_attribute: [postgresql_host, ip] }
                        DB_USER: { get_input: postgresql_db_user }
                        DB_NAME: { get_input: postgresql_db_name }
                        DB_PASS: { get_input: postgresql_db_pass }
                        IS_PRODUCTION: { get_input: is_production }
        relationships:
          - type: cloudify.relationships.contained_in
            target: gunicorn
          - type: cloudify.relationships.connected_to
            target: postgresql_walle


    walle_ui:
        type: cloudify.nodes.SoftwareComponent
        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    implementation: scripts/walle/install_walle_ui_and_dependencies.sh
                    inputs:
                        WALLE_INTERNAL_IP_ADDRESS: { get_attribute: [ walle_host, ip] }
                        WALLE_IP: { get_attribute: [nginx_host, ip] }
                start:
                    implementation: scripts/walle/configure_ui.sh
                    inputs:
                        WALLE_INTERNAL_IP_ADDRESS: { get_attribute: [ walle_host, ip] }
        relationships:
          - type: cloudify.relationships.contained_in
            target: nginx
          - type: cloudify.relationships.depends_on
            target: walle
outputs:
    nginx_ip:
        value: { get_attribute: [ nginx_ip, floating_ip_address ] }

    walle_ip:
        value: { get_attribute: [ walle_ip, floating_ip_address ] }

    postgresql_ip:
        value: { get_attribute: [ postgresql_ip, floating_ip_address ] }

    walle_port:
        value: 443
