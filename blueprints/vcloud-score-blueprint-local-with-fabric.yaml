###########################################################
# This Blueprint installs the Score application
# on a local machine.
###########################################################

tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3m2/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.2/plugin.yaml
  - types/agentless.yaml

inputs:

    servers_user:
        default: ubuntu
        type: string
        description: >
            Default admin user in os template

    private_key_path:
        default: /home/ubuntu/.ssh/id_rsa
        type: string
        description: >
            Please upload key to manager server before use key

    host_string:
        default: localhost
        type: string

    port:
        default: 22
        type: string

    score_package_url:
        type: string
        default: localhost:8000/score-service.tar.gz
        description: >
            Score TAR.GZ package

    score_nginx_configuration_url:
        type: string
        default: localhost:8000/score-nginx-configuration.tar.gz
        description: >
            Score-related nginx configuration

    postgresql_db_name:
        type: string
        default: 'score'

    postgresql_db_user:
        type: string
        default: 'score'

    postgresql_db_pass:
        type: string
        default: 'score'


node_templates:

    host:
        type: cloudify.nodes.Compute
        properties:
          ip: { get_input: host_string }
          install_agent: false

    gunicorn:
        type: agentless.nodes.GunicornServer
        relationships:
          - target: host
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                start:
                    inputs:
                        fabric_env:
                            user: { get_input: servers_user }
                            key_filename: { get_input: private_key_path }
                            host_string: { get_input: host_string }
                            port: { get_input: port }

    postgresqld:
        type: agentless.nodes.PostgreSqlDatabase
        properties:
            port: 5432
        relationships:
          - target: host
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    inputs:
                        fabric_env:
                            user: { get_input: servers_user }
                            key_filename: { get_input: private_key_path }
                            host_string: { get_input: host_string }
                            port: { get_input: port }

    postgresql_score:
        type: agentless.nodes.ScorePostgreSql
        relationships:
          - target: postgresqld
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                start:
                    inputs:
                        task_properties:
                            config:
                                ip: { get_input: host_string }
                                db_user: { get_input: postgresql_db_user }
                                db_name: { get_input: postgresql_db_name }
                                db_pass: { get_input: postgresql_db_pass }
                        fabric_env:
                            user: { get_input: servers_user }
                            key_filename: { get_input: private_key_path }
                            host_string: { get_input: host_string }
                            port: { get_input: port }

    score:
        type: agentless.nodes.score
        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    inputs:
                        SCORE_PACKAGE_URL: { get_input: score_package_url }
                        fabric_env:
                            user: { get_input: servers_user }
                            key_filename: { get_input: private_key_path }
                            host_string: { get_input: host_string }
                            port: { get_input: port }
                start:
                    inputs:
                        DB_IP: { get_input: host_string }
                        DB_USER: { get_input: postgresql_db_user }
                        DB_NAME: { get_input: postgresql_db_name }
                        DB_PASS: { get_input: postgresql_db_pass }
                        SCORE_NGINX_CONFIGURATION_URL: { get_input: score_nginx_configuration_url }
                        fabric_env:
                            user: { get_input: servers_user }
                            key_filename: { get_input: private_key_path }
                            host_string: { get_input: host_string }
                            port: { get_input: port }
        relationships:
          - type: cloudify.relationships.contained_in
            target: gunicorn
          - type: cloudify.relationships.connected_to
            target: postgresql_score

outputs:
    gunicorn_ip:
        value: { get_input: host_string }
