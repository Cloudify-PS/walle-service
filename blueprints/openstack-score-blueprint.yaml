tosca_definitions_version: cloudify_dsl_1_2

imports:
    - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
    - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml
    - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-fabric-plugin/1.3.1/plugin.yaml
    - types/agentless.yaml

inputs:

    cloudify_agent:
        default:  'ubuntu'

    server_image:
        default: e8e1ddb9-80e8-4257-96c4-22d4f2a4927f # Ubuntu Server 14.04

    server_flavor_name:
        default: m1.medium

    server_security_groups:
        default: ['All_ports_open']

    score_package_url:
        type: string
        description: >
            Score TAR.GZ package

    score_nginx_configuration_url:
        type: string
        description: >
            Score-related nginx configuration

    score_ui_package_url:
        type: string
        description: >
            Score UI package

    postgresql_db_name:
        type: string
        default: 'score'

    postgresql_db_user:
        type: string
        default: 'score'

    postgresql_db_pass:
        type: string

    existing_score_db_url:
        type: string
        default: ''
        description: >
            postgresql URL that points to existing database
            example - postgresql://DB_USER:DB_PASS@DB_IP/DB_NAME

    is_production:
        type: boolean
        default: false
        description: >
            Indicates the purpose of the installation, production or staging

    use_existing_score_db_node:
        type: boolean
        default: false
        description: >
            flag that tells to use existing postgresql node

    use_existing_nginx_node:
        type: boolean
        default: false
        description: >
            flag that tells to use existing nginx node

node_types:

    # base server type for installation without agent
    agentless.nodes.ParentTypeServer:
        derived_from: cloudify.openstack.nodes.Server
        properties:
            cloudify_agent:
                default:
                    user: { get_input: cloudify_agent }
            server:
                default:
                    image: { get_input: server_image }
                    flavor_name: { get_input: server_flavor_name }
                    security_groups: { get_input: server_security_groups }

node_templates:

    nginx_ip:
        type: cloudify.openstack.nodes.FloatingIP

    score_ip:
        type: cloudify.openstack.nodes.FloatingIP

    postgresql_ip:
        type: cloudify.openstack.nodes.FloatingIP

    All_ports_open:
        type: cloudify.openstack.nodes.SecurityGroup
        properties:
            security_group:
                name: All_ports_open
            rules:
                - remote_ip_prefix: 0.0.0.0/0
                  port_range_min: 1
                  port_range_max: 65535
                  protocol: tcp
                - remote_ip_prefix: 0.0.0.0/0
                  port_range_min: 1
                  port_range_max: 65535
                  protocol: udp

    score_host:
        type: agentless.nodes.ParentTypeServer
        relationships:
            -   type: cloudify.openstack.server_connected_to_floating_ip
                target: score_ip
            -   type: cloudify.relationships.depends_on
                target: All_ports_open

    nginx_host:
        type: agentless.nodes.ParentTypeServer
        relationships:
            -   type: cloudify.openstack.server_connected_to_floating_ip
                target: nginx_ip
            -   type: cloudify.relationships.depends_on
                target: All_ports_open

    postgresql_host:
        type: agentless.nodes.ParentTypeServer
        relationships:
            -   type: cloudify.openstack.server_connected_to_floating_ip
                target: postgresql_ip
            -   type: cloudify.relationships.depends_on
                target: All_ports_open

    nginx:
        type: agentless.nodes.Nginx
        relationships:
          - target: nginx_host
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                start:
                    inputs:
                        SKIP_INSTALLATION: { get_input: use_existing_nginx_node }
                        SCORE_NGINX_CONFIGURATION_URL: { get_input: score_nginx_configuration_url }
                        SCORE_INTERNAL_IP_ADDRESS: { get_attribute: [ score_host, ip] }

    gunicorn:
        type: agentless.nodes.GunicornServer
        relationships:
          - target: score_host
            type: cloudify.relationships.contained_in

    postgresqld:
        type: agentless.nodes.PostgreSqlDatabase
        properties:
            port: 5432
        relationships:
          - target: postgresql_host
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    inputs:
                        SKIP_INSTALLATION: { get_input: use_existing_score_db_node }


    postgresql_score:
        type: agentless.nodes.ScorePostgreSql
        relationships:
          - target: postgresqld
            type: cloudify.relationships.contained_in
        interfaces:
            cloudify.interfaces.lifecycle:
                start:
                    inputs:
                        SKIP_CONFIGURATION: { get_input: use_existing_score_db_node }
                        DB_IP: { get_attribute: [postgresql_host, ip] }
                        SCORE_IP: { get_attribute: [score_host, ip] }
                        DB_USER: { get_input: postgresql_db_user }
                        DB_NAME: { get_input: postgresql_db_name }
                        DB_PASS: { get_input: postgresql_db_pass }

    score:
        type: agentless.nodes.score
        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    inputs:
                        SCORE_PACKAGE_URL: { get_input: score_package_url }
                start:
                    inputs:
                        SCORE_EXISTING_DB: { get_input: existing_score_db_url }
                        DB_IP: { get_attribute: [postgresql_host, ip] }
                        DB_USER: { get_input: postgresql_db_user }
                        DB_NAME: { get_input: postgresql_db_name }
                        DB_PASS: { get_input: postgresql_db_pass }
                        IS_PRODUCTION: { get_input: is_production }
        relationships:
          - type: cloudify.relationships.contained_in
            target: gunicorn
          - type: cloudify.relationships.connected_to
            target: postgresql_score


    score_ui:
        type: agentless.nodes.score_ui
        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    inputs:
                        SCORE_UI_PACKAGE_URL: { get_input: score_ui_package_url }
                        SCORE_IP: { get_attribute: [nginx_host, ip] }
        relationships:
          - type: cloudify.relationships.contained_in
            target: nginx

outputs:
    score_ip:
        value: { get_attribute: [ nginx_ip, floating_ip_address ] }

    score_port:
        value: 443
